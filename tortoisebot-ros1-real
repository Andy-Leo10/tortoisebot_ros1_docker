# This Docker image will contain everything necessaary 
# for starting all the real robot systems, including 
# the camera and laser

# Start from Ubuntu 20.04 base image
# FROM ubuntu:20.04
FROM ros:noetic-ros-core

# set ros distribution
ENV ROS_DISTRO noetic

RUN apt-get install -y --no-install-recommends python3-rosdep
RUN rosdep init \
    && rosdep fix-permissions \
    && rosdep update
RUN echo "source /opt/ros/noetic/setup.bash" >> ~/.bashrc

# Install necessary packages
RUN apt-get update && apt-get install -y \
    git \
    python3 \
    python3-pip \
    python3-catkin-tools \
    python3-osrf-pycommon \
    python3-rpi.gpio \
    python3-rosdep \
    python3-wstool \
    ninja-build \
    stow \
    nano \
    ros-noetic-catkin \
    ros-noetic-camera-info-manager \
    ros-noetic-compressed-image-transport \
    ros-noetic-rqt-image-view \
    libraspberrypi-bin \
    libraspberrypi-dev \
    ros-noetic-xacro \
    ros-noetic-urdf \
    ros-noetic-joint-state-publisher \
    ros-noetic-robot-state-publisher \
    ros-noetic-gmapping \
    ros-noetic-rosbridge-server \
    ros-noetic-web-video-server \
    ros-noetic-tf2-web-republisher \
    ros-noetic-amcl \
    ros-noetic-map-server \
    ros-noetic-move-base \
    ros-noetic-navigation \
    ros-noetic-slam-gmapping \
    ros-noetic-dwa-local-planner \
    ros-noetic-ira-laser-tools \
    # ros-noetic-joint-state-publisher-gui \
    ros-noetic-teleop-twist-keyboard

# Create an overlay Catkin workspace
RUN /bin/bash -c "source /opt/ros/noetic/setup.bash \
    && mkdir -p /catkin_ws/src \
    && cd /catkin_ws/src \
    && catkin_init_workspace \
    && git clone -b noetic https://github.com/rigbetellabs/tortoisebot.git"
# Build the workspace
RUN /bin/bash -c "source /opt/ros/noetic/setup.bash \
    && cd /catkin_ws \
    # && catkin build -j1 \
    && catkin_make \
    && source /catkin_ws/devel/setup.bash \
    && echo 'source /catkin_ws/devel/setup.bash' >> ~/.bashrc"



# do cartographer setup for ros noetic
# Set the working directory
WORKDIR /catkin_ws/carto_ws

# do cartographer setup for ros noetic
# Initialize the workspace and merge the cartographer_ros.rosinstall file, install dependencies
RUN wstool init src && \
    wstool merge -t src https://raw.githubusercontent.com/cartographer-project/cartographer_ros/master/cartographer_ros.rosinstall && \
    wstool update -t src && \
    rosdep init && \
    rosdep update && \
    sed -i 's/<depend>libabsl-dev<\/depend>/<!-- <depend>libabsl-dev<\/depend> -->/g' src/cartographer/package.xml && \
    rosdep install --from-paths src --ignore-src --rosdistro=${ROS_DISTRO} -y

# Clone the necessary repositories
WORKDIR /catkin_ws/carto_ws/src
RUN git clone -b melodic-devel https://github.com/ros-perception/perception_pcl.git && \
    git clone https://github.com/ros-perception/pcl_msgs && \
    git clone -b noetic-devel https://github.com/jsk-ros-pkg/geometry2_python3.git 

# Install additional dependencies, build the workspace, and source it
RUN /bin/bash -c "source /opt/ros/${ROS_DISTRO}/setup.bash \
    && cd /catkin_ws/carto_ws \
    && rosdep install --from-paths src --ignore-src --rosdistro=${ROS_DISTRO} -y \
    && /catkin_ws/carto_ws/src/cartographer/scripts/install_abseil.sh \
    && catkin_make_isolated --install --use-ninja -j1 -l1 \
    && source /catkin_ws/carto_ws/install_isolated/setup.bash"

# Overlay the catkin_ws with the carto_ws, delete the devel and build folders, and redo catkin_make
WORKDIR /catkin_ws
RUN rm -rf build devel && \
    catkin_make && \
    echo 'source /catkin_ws/devel/setup.bash' >> ~/.bashrc

# copy a launch file 'mapping.launch' for gmapping
COPY /tortoisebot_slam/launch/mapping1.launch /catkin_ws/tortoisebot_slam/launch/
COPY /tortoisebot_slam/launch/mapping2.launch /catkin_ws/tortoisebot_slam/launch/
COPY /tortoisebot_slam/launch/mapping3.launch /catkin_ws/tortoisebot_slam/launch/
WORKDIR /catkin_ws

# Set up the work directory and entrypoint
WORKDIR /catkin_ws

